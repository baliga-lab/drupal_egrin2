<?php

function egrin2_help($path, $arg) {
    switch ($path) {
    case "admin/help#egrin2":
        return t("Displays data from EGRIN2 APIs");
        break;
    }
}

/*
 * Block Definitions
 */
function make_corem_table() {
    global $base_url;
    $block['subject'] = t('Corems');
    if (user_access('access content')) {
        $url = variable_get('egrin2_url', '');
        $resp = drupal_http_request($url . "/api/v1.0.0/corems");
        $corems = json_decode($resp->data)->corems;
        $header = array(array("data" => "Corem ID", "sort" => "asc", "class" => array('views-field-title')),
                        array("data" => "# Genes", "class" => array("views-field-title")),
                        array("data" => "# Conditions", "class" => array("views-field-title")));
        $rows = array();
        foreach ($corems as $c) {
            $rows []= array('data' => array(t('<a href="' . $base_url . '/egrin2/corem/' . $c->id . '">' . $c->id . '</a>'),
                                            t($c->num_genes), t($c->num_conds)));
        }
        $stable = array("header" => $header,
                        "rows" => $rows,
                        "attributes" => array("class" => array("views-table", "cols-11",
                                                               "table-striped")),
                        "caption" => "",
                        "colgroups" => array(),
                        "sticky" => false,
                        "empty" => "no entries");
        $block['content'] = theme_table($stable);
    }
    return $block;
}

function make_corem_genes_table($corem) {
    global $base_url;
    //$base_url = 'http://networks.systemsbiology.net/mtb'; // just testing
    $block['subject'] = t('Corem Genes');
    if (user_access('access content')) {
        $url = variable_get('egrin2_url', '');
        $resp = drupal_http_request($url . "/api/v1.0.0/corem_genes/" . $corem);
        $genes = json_decode($resp->data)->genes;

        $header = array(array("data" => "Name", "sort" => "asc",
                              "class" => array("views-field-title")),
                        array("data" => "Common Name",
                              "class" => array("views-field-title")),
                        array("data" => "Links",
                              "class" => array("views-field-title")),
                        array("data" => "Description",
                              "class" => array("views-field-title")),
                        array("data" => "Start",
                              "class" => array("views-field-title")),
                        array("data" => "Stop",
                              "class" => array("views-field-title")),
                        array("data" => "Strand",
                              "class" => array("views-field-title")),
                        array("data" => "Chromosome",
                              "class" => array("views-field-title")),
                        );
        $rows = array();
        foreach ($genes as $g) {
            $links = "<a class=\"small-link\" target=\"_blank\" href=\"https://www.ncbi.nlm.nih.gov/protein/" . $g->accession . "\">NCBI</a><br>" .
                "<a class=\"small-link\" target=\"_blank\" href=\"http://tuberculist.epfl.ch/quicksearch.php?gene+name=" . $g->gene_name . "\">Tuberculist</a><br>";

            $rows []= array(t('<a href="' . $base_url . '/genes/' . $g->gene_name . '">' . $g->gene_name . "</a>"),
                            t($g->common_name),
                            t($links),
                            t($g->description),
                            t($g->start),
                            t($g->stop),
                            t($g->strand),
                            t($g->chromosome),
                            );
        }
        $stable = array("header" => $header,
                        "rows" => $rows,
                        "attributes" => array("class" => array("views-table", "cols-11",
                                                               "table-striped")),
                        "caption" => "",
                        "colgroups" => array(),
                        "sticky" => false,
                        "empty" => "no entries");
        $block['content'] = theme_table($stable);
    }
    return $block;
}

function make_corem_conditionblocks_table($corem) {
    $block['subject'] = t('Condition Blocks');
    if (user_access('access content')) {
        $url = variable_get('egrin2_url', '');
        $resp = drupal_http_request($url . "/api/v1.0.0/corem_condition_enrichment/" . $corem);
        $blocks = json_decode($resp->data)->condition_blocks;
        $header = array(array("data" => "Name", "sort" => "asc",
                              "class" => array("views-field-title")),
                        array("data" => "q-value",
                              "class" => array("views-field-title")));
        $rows = array();
        foreach ($blocks as $b) {
            $rows []= array(t($b->name),t($b->q_value));
        }
        $stable = array("header" => $header,
                        "rows" => $rows,
                        "attributes" => array("class" => array("views-table", "cols-11",
                                                               "table-striped")),
                        "caption" => "",
                        "colgroups" => array(),
                        "sticky" => false,
                        "empty" => "no entries");
        $block['content'] = theme_table($stable);
    }
    return $block;
}

function make_corem_funcat_table($corem) {
    $block['subject'] = t('Functional Categories');
    if (user_access('access content')) {
        $url = variable_get('egrin2_url', '');
        $resp = drupal_http_request($url . "/api/v1.0.0/corem_categories/" . $corem);
        $cats = json_decode($resp->data)->categories;
        $header = array(array("data" => "Name", "sort" => "asc",
                              "class" => array("views-field-title")),
                        array("data" => "q-value",
                              "class" => array("views-field-title")));
        $rows = array();
        foreach ($cats as $c) {
            $rows []= array(t($c->category),t($c->p_adj));
        }
        $stable = array("header" => $header,
                        "rows" => $rows,
                        "attributes" => array("class" => array("views-table", "cols-11",
                                                               "table-striped")),
                        "caption" => "",
                        "colgroups" => array(),
                        "sticky" => false,
                        "empty" => "no entries");
        $block['content'] = theme_table($stable);
    }
    return $block;
}

function make_corem_gres_table($corem) {
    $block['subject'] = t('GRES');
    if (user_access('access content')) {
        $url = variable_get('egrin2_url', '');
        $resp = drupal_http_request($url . "/api/v1.0.0/corem_gres/" . $corem);
        $gres = json_decode($resp->data)->gres;
        $header = array(array("data" => "GRE", "sort" => "asc",
                              "class" => array("views-field-title")),
                        array("data" => "Motif",
                              "class" => array("views-field-title")),
                        array("data" => "Motif e-value",
                              "class" => array("views-field-title")),
                        array("data" => "q-value",
                              "class" => array("views-field-title")),
                        );
        $rows = array();
        $seqlogo_code = "";
        foreach ($gres as $g) {
            $rows []= array(t($g->gre),
                            t('<span id="gre_pssm_' . $g->gre . '"></span>'),
                            t($g->motif_evalue),
                            t($g->q_value),);

            $seqlogo_code .= "var gre_pssm_" . $g->gre . ' = ' . json_encode($g->pssm) . ';';
        }
        $seqlogo_code .= "jQuery(document).ready(function() {";
        foreach ($gres as $g) {
            if (get_object_vars($g->pssm)) {
                $seqlogo_code .= '  seqlogo.makeLogo("gre_pssm_' . $g->gre . '", gre_pssm_' . $g->gre . ', {width: 400, height: 120, glyphStyle: "20pt Helvetica"});';
            }
        }
        $seqlogo_code .= "});";
        drupal_add_js(t($seqlogo_code),
                      array('type' => 'inline', 'scope' => 'footer'));
        $stable = array("header" => $header,
                        "rows" => $rows,
                        "attributes" => array("class" => array("views-table", "cols-11",
                                                               "table-striped")),
                        "caption" => "",
                        "colgroups" => array(),
                        "sticky" => false,
                        "empty" => "no entries");
        $block['content'] = theme_table($stable);
    }
    return $block;
}

function make_corem_coexpression_chart($corem) {
    global $base_url;
    $block['subject'] = t('Co-Expression Chart');
    if (user_access('access content')) {
        $url = variable_get('egrin2_url', '');
        $html = '';
        //$html = "<div style=\"width: 100%;\"><img id=\"coexp_help\" style=\"width: 18px; float: right\" src=\"" . esc_url(plugins_url('images/help.png', __FILE__)). "\"></div>\n";
        $html .= '<div id="corem_coexps" style="width: 100%; height: 300px"></div>';
        $block['content'] = t($html);

        // javascript here
        $content = '';
        $content .= "    function makeCoCoExpChart(data, conds) {";
        $content .= "      var x, chart = Highcharts.chart('corem_coexps', {";
        $content .= "        chart: { type: 'line' },";
        $content .= "        title: { text: 'Co-expression' },";
        $content .= "        xAxis: { title: { text: 'Conditions' }, categories: conds,";
        $content .= "                 labels: {";
        $content .= "                   formatter: function() {";
        $content .= "                     return this.axis.categories.indexOf(this.value);";
        $content .= "                   }}},";
        $content .= "        yAxis: { title: { text: 'Standardized expression'} },";
        $content .= "        series: data";
        $content .= "     })";
        $content .= "   }";

        $content .= "  jQuery(document).ready(function() {";
        $content .= "    jQuery('#coexp_help').qtip({ content: 'Hover over data points to see condition and value information' });";
        $content .= "    jQuery.ajax({";
        $content .= "      url: '" . $base_url . "/egrin2/test/" . $corem . "',";
        $content .= "      method: 'GET',";
        $content .= "      dataType: 'json',";
        $content .= "      contentType: 'application/json',";
        $content .= "      complete: function(xhr) {";
        $content .= "        var data = JSON.parse(xhr.responseText);";
        $content .= "        makeCoCoExpChart(data.expressions, data.conditions);";
        $content .= "      }";
        $content .= "    });";
        $content .= "  });";
        drupal_add_js(t($content),
                      array('type' => 'inline', 'scope' => 'footer'));
    }
    return $block;
}


function egrin2_block_info() {
    $blocks['cgenes_table'] = array('info' => t('Corem Genes'),
                                    'status' => TRUE,
                                    'region' => 'content',
                                    'visibility' => BLOCK_VISIBILITY_LISTED,
                                    'pages' => 'egrin2/corem/*',);

    $blocks['ccblocks_table'] = array('info' => t('Corem Condition Blocks'),
                                    'status' => TRUE,
                                    'region' => 'content',
                                    'visibility' => BLOCK_VISIBILITY_LISTED,
                                    'pages' => 'egrin2/corem/*',);
    $blocks['cfuncat_table'] = array('info' => t('Corem Functional Categories'),
                                    'status' => TRUE,
                                    'region' => 'content',
                                    'visibility' => BLOCK_VISIBILITY_LISTED,
                                    'pages' => 'egrin2/corem/*',);
    $blocks['cgres_table'] = array('info' => t('Corem GREs'),
                                    'status' => TRUE,
                                    'region' => 'content',
                                    'visibility' => BLOCK_VISIBILITY_LISTED,
                                    'pages' => 'egrin2/corem/*',);
    $blocks['ccoexp_chart'] = array('info' => t('Corem Co-Expression Chart'),
                                    'status' => TRUE,
                                    'region' => 'content',
                                    'visibility' => BLOCK_VISIBILITY_LISTED,
                                    'pages' => 'egrin2/corem/*',);
    $blocks['summary'] = array('info' => t('EGRIN2 Model Summary'),
                               'cache' => DRUPAL_CACHE_PER_ROLE,);
    $blocks['corems_table'] = array('info' => t('EGRIN2 Corems Table'),
                                    'status' => TRUE,
                                    'region' => 'content',
                                    'visibility' => BLOCK_VISIBILITY_LISTED,
                                    'pages' => 'egrin2/corems',);
    return $blocks;
}

function egrin2_block_view($delta='') {
    $url_comps = explode('/', request_uri());
    $last_arg = end($url_comps);

    switch ($delta) {
    case 'summary':
        $block['subject'] = t('EGRIN2 Model Overview');
        if (user_access('access content')) {
            $url = variable_get('egrin2_url', '');
            $resp = drupal_http_request($url . "/api/v1.0.0/summary");
            $summary = json_decode($resp->data);
            $stable = array("header" => array(array("data" => "Type"), array("data" => "Num")),
                            "rows" => array(array("GREs", $summary->num_gres),
                                            array("Corems", $summary->num_corems),
                                            array("Conditions", $summary->num_conditions),
                                            array("Genes", $summary->num_genes),
                                            array("Biclusters", $summary->num_biclusters)),
                            "attributes" => array(),
                            "caption" => "Summary of model",
                            "colgroups" => array(),
                            "sticky" => false,
                            "empty" => "no entries");
            $block['content'] = theme_table($stable);
        }
        break;
    case 'corems_table':
        $block = make_corem_table();
        break;
    case 'cgenes_table':
        $block = make_corem_genes_table($last_arg);
        break;
    case 'cfuncat_table':
        $block = make_corem_funcat_table($last_arg);
        break;
    case 'ccblocks_table':
        $block = make_corem_conditionblocks_table($last_arg);
        break;
    case 'cgres_table':
        drupal_add_library('egrin2', 'seqlogo');
        $block = make_corem_gres_table(($last_arg));
        break;
    case 'ccoexp_chart':
        drupal_add_library('egrin2', 'highcharts');
        drupal_add_library('egrin2', 'qtip');
        $block = make_corem_coexpression_chart($last_arg);
        break;
    }
    return $block;
}


/*
 * The _library() hook is used to declare external Javascript and CSS libraries.
 * In order to use them we also need to call drupal_add_library() at the correct places
 */
function egrin2_library() {
    $libraries['seqlogo'] = array('title' => 'sequencelogo.js',
                                  'version' => '1.0',
                                  'js' => array(drupal_get_path('module', 'egrin2') . '/js/seqlogo.js' => array(),),);
    $libraries['highcharts'] = array('title' => 'highcharts.js',
                                     'version' => '5.0.6',
                                     'js' => array(drupal_get_path('module', 'egrin2') . '/js/highcharts.js' => array(),),);
    $libraries['qtip'] = array('title' => 'qtip.js',
                               'version' => '3.0.3',
                               'js' => array(drupal_get_path('module', 'egrin2') . '/js/jquery.qtip.min.js' => array(),),);
    return $libraries;
}

/*
 * Configuration section for the plugin
 * The components in this plugin need to know the base URL of the EGRIN2 API.
 * It uses the Drupal form API to create a persistent value for this setting
 */
function egrin2_menu() {
    $items = array();
    $items['admin/config/content/egrin2'] = array('title' => 'EGRIN2',
                                                  'description' => 'Configuration for EGRIN2 module',
                                                  'page callback' => 'drupal_get_form',
                                                  'page arguments' => array('egrin2_form'),
                                                  'access arguments' => array('access administration pages'),
                                                  'type' => MENU_NORMAL_ITEM,
                                                  );
    /*
     * Define additional routes, that are "virtual" nodes. Users can assume that they
     * exist, and therefore just use them
     */
    // Ajax example route
    $items['egrin2/test/%'] = array('page callback' => 'egrin2_corem_exps',
                                    'page arguments' => array(2,),
                                    'access arguments' => array('access content'),
                                    );

    // Virtual nodes for the corems list and corem detail page
    $items['egrin2/corems'] = array('page callback' => 'egrin2_corems',
                                    'access arguments' => array('access content'),
                                    );
    $items['egrin2/corem/%'] = array('page callback' => 'egrin2_corem',
                                     'page arguments' => array(1,),
                                     'access arguments' => array('access content'),
                                     );
    return $items;
}

function egrin2_form($form, &$form_state) {
    $form['egrin2_url'] = array('#type' => 'textfield',
                                '#title' => t('EGRIN2 API URL'),
                                '#default_value' => variable_get('egrin2_url', ''),
                                '#size' => 100,
                                '#maxlength' => 100,
                                '#description' => t('The URL of the EGRIN2 web service API.'),
                                '#required' => TRUE,
                                );
    return system_settings_form($form);
}


/* AJAX Service functions */
function egrin2_corem_exps($corem) {
    $url = variable_get('egrin2_url', '');
    $resp = drupal_http_request($url . "/api/v1.0.0/corem_expressions/" . $corem);
    $exps = json_decode($resp->data);
    $expdata = array();
    foreach ($exps->expressions as $gene => $values) {
        $expdata []= (object) array('name' => $gene, 'data' => $values);
    }
    drupal_add_http_header('Content-Type', 'application/json');
    echo drupal_json_output(array('conditions' => $exps->conditions,
                                    'expressions' => $expdata));
    drupal_exit();
}

/* Virtual routes */
function egrin2_corem() {
    return t("<h2>Information for Corem " . arg(2) . "</h2>");
}

function egrin2_corems() {
    return t("<h2>EGRIN2 Corems</h1>");
}
